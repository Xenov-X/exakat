#!/usr/bin/env php
<?php
/*
 * Copyright 2012-2018 Damien Seguy â€“ Exakat SAS <contact(at)exakat.io>
 * This file is part of Exakat.
 *
 * Exakat is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Exakat is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Exakat.  If not, see <http://www.gnu.org/licenses/>.
 *
 * The latest code can be found at <http://exakat.io/>.
 *
*/

use Exakat\Graph\Helpers\GraphResults;
use Exakat\Config;
use Exakat\Datastore;
use Exakat\Query\Query;
use Exakat\Analyzer\Analyzer;

include_once(dirname(__DIR__).'/library/Exakat/Autoload/Autoload.php');
include_once(dirname(__DIR__).'/library/helpers.php');
require __DIR__.'/../vendor/autoload.php';

spl_autoload_register('\Exakat\Autoload\Autoload::autoload_library');

$config = new Config(array());

$begin = microtime(true);
//$graphDB = new \Exakat\Graph\Tinkergraph($config);
$graphDB = new \Exakat\Graph\Gsneo4j($config);
//$graphDB = new \Exakat\Graph\Bitsy($config);

$end = microtime(true);
print "Connect : ".number_format(($end - $begin) * 1000, 2)." ms\n";

$res = $graphDB->query('g.V().hasLabel("Project").values("code")');
print $project = $res[0];

        $args = array ( 1 => 'findextlib',
                        2 => '-p',
                        3 => $project,
                        );

        $config = new Config($args);


$begin = microtime(true);
$minus = 10;

$datastore = new Datastore($config);

// For normal method calls, in traits
$query = new Query(0, $project, 'test_dsl', null, $datastore);
$b = hrtime(true);

$query->atomIs('Methodcall', Analyzer::WITHOUT_CONSTANTS)
//              ->returnCount();
              ;
              
$query->prepareRawQuery();

$e = hrtime(true);
print 'Prepare : '.number_format(($e - $b) / 1000000, 2)."ms\n";

//$query->printRawQuery();
$query->prepareRawQuery();

$b = hrtime(true);
$result = $graphDB->query($query->getQuery(), $query->getArguments());
$e = hrtime(true);
print 'Query : '.number_format(($e - $b) / 1000, 2)."ms\n";



$count = $result->toInt();

print "$count values returned\n";
print_r($result->toArray());
?>