#!/usr/bin/env php
<?php
/*
 * Copyright 2012-2018 Damien Seguy â€“ Exakat SAS <contact(at)exakat.io>
 * This file is part of Exakat.
 *
 * Exakat is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Exakat is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Exakat.  If not, see <http://www.gnu.org/licenses/>.
 *
 * The latest code can be found at <http://exakat.io/>.
 *
*/

use Exakat\Graph\Helpers\GraphResults;
use Exakat\Config;

include dirname(__DIR__)."/library/Exakat/Autoload/Autoload.php";
include dirname(__DIR__)."/library/Exakat/Autoload/AutoloadExt.php";
include dirname(__DIR__)."/library/Exakat/Autoload/AutoloadDev.php";
include dirname(__DIR__)."/library/helpers.php";

$autoload = new \Exakat\Autoload\Autoload();
$autoload->registerAutoload();
include dirname(__DIR__)."/vendor/autoload.php";

$config = new Config(array());

$begin = microtime(true);
//$graphDB = new \Exakat\Graph\Tinkergraph($config);
$graphDB = new \Exakat\Graph\Gsneo4j($config);
//$graphDB = new \Exakat\Graph\Bitsy($config);

$end = microtime(true);
print "Connect : ".number_format(($end - $begin) * 1000, 2)." ms\n";

$res = $graphDB->query('g.V().hasLabel("Project").values("fullcode")');
$project = $res[0];

$begin = microtime(true);
$query = <<<QUERY

g.V().hasLabel('Methodcall').out('OBJECT').in('DEFINITION').valueMap(true);


QUERY;
//
print $query;

$res = $graphDB->query($query, [ ]);

$end = microtime(true);
print "Time : ".number_format(($end - $begin) * 1000, 2)." ms\n";

$list = array();

if ($res->isType(GraphResults::ARRAY)) {
    foreach($res as $k => $v) {
        if (is_array($v)) {
            /*
            list('b' => $b, 'a' => $a) = $v;
            if (isset($list[$b][$a])) {
                ++$list[$b][$a];
            } else {
                $list[$b][$a] = 1;
            }
            continue;
            */
            /*
            $label = $v['label'];
            unset($v['id']);
            if (isset($list[$label]) && $list[$label] != array_keys($v)) {
                print "Difference for $label\n";
                print_r(array_keys($v));
                print_r($list[$label]);
                die();
            }
            $list[$label] = array_keys($v);
            continue;
            print_r($list);die();
            */
            print "$k)\n";
            foreach($v as $a => $b) {
                print "  $a  =>  ".var_export($b, true)."\n";
            }
        } else {
            print "$k  =>  $v\n";
            if (preg_match('/^\$\w+$/', $v)) {
                $list[] = $v;
            }
        }
    }
} else {
    print "res => ".$res->toString().PHP_EOL;
}
print var_export($list);
?>