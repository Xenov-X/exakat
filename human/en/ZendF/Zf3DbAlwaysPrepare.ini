name = "Should Always Prepare";
description = "Avoid using variables in string when preparing queries. Always try use the prepare statement by naming variables.

This is particularly sensitive when using where() and having() methods. 

Other methods, like limit() or offset() are immune against injections. 

<?php
    // OK : all is hardcoded, no chance of injection
    $select->from('foo')->where('x = 5');

    // This is the recommended way to use a variable
    $select->from('foo')->where(['x' => $v]);

    // Concatenation is unsafe
    $select->from('foo')->where('x = '.$v);
    $select->from('foo')->where(\"x = $v\");
?>

This analysis reports a false-postive, even when the included variable is an internal variable : it has been defined in the application, and not acquired from external users. In such case, injection and legit usage of concatenation are undistinguishable. 

See also `zend-db documentation <https://github.com/zendframework/zend-db/blob/master/docs/book/index.md>`_.

";
clearphp = "";
severity = "";
timetofix = "";
exakatSince = "1.0.5";