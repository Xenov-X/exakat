name = "Deep Definitions";
description = "Structures, such as functions, classes, interfaces, traits, etc. may be defined anywhere in the code, including inside functions. This is legit code for PHP. 

Since the availability of autoload, with spl_register_autoload(), there is no need for that kind of code. Structures should be defined, and accessible to the autoloading. Inclusions and deep definitions should be avoided, as they compel code to load some definitions, while autoloading will only load them if needed. 

<?php

class X {
    function init() {
        // myFunction is defined when and only if X::init() is called.
        if (!function_exists('myFunction'){
            function myFunction($a) {
                return $a + 1;
            }
        })
    }
}

?>

Functions are excluded from autoload, but shall be gathered in libraries, and not hidden inside other code.

Constants definitions are tolerated inside functions : they may be used for avoiding repeat, or noting the usage of such function. 

Definitions inside a if/then statement, that include PHP version check are accepted here.

See also `Autoloading Classes <http://php.net/manual/en/language.oop5.autoload.php>`_.
";
clearphp = "";
severity = "S_MAJOR";
timetofix = "T_SLOW";
exakatSince = "0.8.4";

modifications[] = "Move function definitions to th global space : outside structures, and method."

[example1]
project=Dolphin
file=wp-admin/includes/misc.php
line=74
code="function ConstructHiddenValues($Values)
{
    /**
     *    Recursive function, processes multidimensional arrays
     *
     * @param string $Name  Full name of array, including all subarrays' names
     *
     * @param array  $Value Array of values, can be multidimensional
     *
     * @return string    Properly consctructed <input type=\"hidden\"...> tags
     */
    function ConstructHiddenSubValues($Name, $Value)
    {
        if (is_array($Value)) {
            $Result = \"\";
            foreach ($Value as $KeyName => $SubValue) {
                $Result .= ConstructHiddenSubValues(\"{$Name}[{$KeyName}]\", $SubValue);
            }
        } else // Exit recurse
        {
            $Result = \"<input type=\\"hidden\\" name=\\"\" . htmlspecialchars($Name) . \"\\" value=\\"\" . htmlspecialchars($Value) . \"\\" />\n\";
        }

        return $Result;
    }

    /* End of ConstructHiddenSubValues function */

    $Result = '';
    if (is_array($Values)) {
        foreach ($Values as $KeyName => $Value) {
            $Result .= ConstructHiddenSubValues($KeyName, $Value);
        }
    }

    return $Result;
}";
explain="The ConstructHiddenValues function builds the ConstructHiddenSubValues function. Thus, ConstructHiddenValues can only be called once. "

[example2]
project="Dolphin"
file="source.php"
line="247"
code="function source_display($sourcenum) {
	global $dbh, $db_functions, $tree_id, $dataDb, $user, $pdf, $screen_mode, $language;

/// More code 

		$person_cls = New person_cls;

		// *** Find person data if source is connected to a family item ***
		// *** This seperate function speeds up the sources page ***
		function person_data($familyDb){
			global $dbh, $db_functions;
			if ($familyDb->fam_man)
				$personDb=$db_functions->get_person ($familyDb->fam_man);
			else
				$personDb=$db_functions->get_person ($familyDb->fam_woman);
			return $personDb;
		}
";
explain="person_data() is a short-cut, only used with a PDF display environnement. "
