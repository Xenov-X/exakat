name = "Courrier Anti-Pattern";
description = "The courrier anti-pattern is the storage of a dependency by a class, in order to create an instance that requires this dependendy.

The class itself doesn't actually need this dependency, but has de dependency to a class that requires it. 

<?php

// The foo class requires bar
class Foo {
    public function __construct(Bar $b) {
    }
}

// Class A doesn't depends on Bar, but depends on Foo
// Class A never uses Bar, but only uses Foo.
class A {
    private $courrier;

    public function __construct(Bar $courrier) {
        $this->courrier = $courrier;       
    }

    public function Afoo() {
        $b = new Foo($this->courrier);
    }

}

?>

The alternative here is to inject Foo instead of Bar. 

See also `Courrier Anti-pattern <https://r.je/oop-courier-anti-pattern.html>`_.";
clearphp = "";
severity = "";
timetofix = "";
exakatSince = "0.11.6";